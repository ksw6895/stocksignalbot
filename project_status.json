{
  "project_info": {
    "name": "Cryptocurrency Real-time Signal Bot",
    "version": "1.1.0",
    "description": "주봉 캔들 기반 암호화폐 자동 시그널 봇. 실시간 시가총액 필터링 및 텔레그램 알림 기능",
    "created_date": "2025-07-15",
    "last_updated": "2025-07-15",
    "author": "ksw6895",
    "repository": "https://github.com/ksw6895/cryptosignal"
  },
  
  "completed_tasks": {
    "1_cleanup": {
      "description": "불필요한 파일 정리",
      "details": [
        "주식 관련 파일 모두 삭제 (stocks.py, StockBot.py, config_stocks.py 등)",
        "백테스트 관련 파일 삭제 (backtest.py, KwontBot.py, analyzeData.py)",
        "Zone.Identifier 파일들 삭제",
        "backtest_results 폴더 삭제"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "2_main_bot_implementation": {
      "description": "실시간 시그널 봇 구현",
      "details": [
        "crypto_signal_bot.py 메인 파일 생성",
        "매시간 자동 스캔 기능",
        "실시간 시가총액 필터링",
        "텔레그램 봇 통합"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "3_api_protection": {
      "description": "API 제한 보호 기능",
      "details": [
        "Exponential backoff 구현 (2^n 초, 최대 10분)",
        "API ban 감지 (418/429 에러 시 1시간 대기)",
        "적응형 딜레이 (에러율에 따라 속도 조절)",
        "재시도 로직 (심볼당 3회, 전체 10회)"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "4_deployment_setup": {
      "description": "24시간 배포 설정",
      "details": [
        "render.yaml 생성",
        ".env.example 생성",
        ".gitignore 설정",
        "requirements.txt 최적화",
        "README.md 작성",
        "DEPLOYMENT_GUIDE.md 작성"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "5_proxy_implementation": {
      "description": "프록시 지원 추가",
      "details": [
        "SOCKS5/HTTP 프록시 지원 구현",
        "선택적 프록시 사용 (Binance API만)",
        "프록시 실패 시 자동 fallback",
        "NordVPN 설정 가이드 작성"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "6_deployment_troubleshooting": {
      "description": "배포 문제 해결",
      "details": [
        "Render IP 차단 문제 확인 (418 에러)",
        "프록시 연결 실패 분석 (SOCKS 타임아웃)",
        "로컬 실행 환경 설정 (WSL 가상환경)",
        "대체 배포 플랫폼 조사 및 설정 파일 생성"
      ],
      "status": "completed",
      "date": "2025-07-15"
    },
    
    "7_google_cloud_migration": {
      "description": "Google Cloud Run 마이그레이션",
      "details": [
        "프록시 관련 코드 완전 제거",
        "Cloud Run용 Flask wrapper 추가",
        "Dockerfile 및 .dockerignore 생성",
        "requirements.txt 정리",
        "상세한 배포 가이드 작성"
      ],
      "status": "completed",
      "date": "2025-07-15"
    }
  },
  
  "current_issues": {
    "resolved": {
      "render_deployment": "Google Cloud Run으로 마이그레이션 완료",
      "proxy_limitations": "프록시 불필요 - Google Cloud IP는 Binance에서 허용"
    }
  },
  
  "deployment_alternatives": {
    "tested_platforms": {
      "render": {
        "status": "실패",
        "reason": "IP 차단, SOCKS 프록시 차단"
      },
      "local_wsl": {
        "status": "성공",
        "pros": "IP 차단 없음, 완전한 제어",
        "cons": "24시간 컴퓨터 켜놓아야 함"
      }
    },
    
    "recommended_platforms": {
      "railway": {
        "priority": 1,
        "pros": "Render와 유사, $5 무료 크레딧, 다른 IP 대역",
        "config_file": "railway.toml"
      },
      "google_cloud_run": {
        "priority": 1,
        "pros": "$300 무료 크레딧, 안정적, Binance 차단 없음",
        "cons": "초기 설정 복잡",
        "status": "IMPLEMENTED - 배포 준비 완료"
      },
      "fly_io": {
        "priority": 3,
        "pros": "전세계 리전 선택 가능",
        "config_file": "fly.toml"
      },
      "oracle_cloud": {
        "priority": 4,
        "pros": "영구 무료 VM",
        "cons": "설정 매우 복잡"
      }
    }
  },
  
  "technical_improvements": {
    "implemented": [
      "환경 변수 검증 로깅",
      "프록시 설정 디버그 출력",
      "프록시 실패 시 자동 직접 연결",
      "상세한 에러 메시지"
    ],
    
    "planned": [
      "여러 프록시 서버 자동 전환",
      "API 응답 캐싱으로 요청 수 감소",
      "웹소켓 연결로 실시간 모니터링"
    ]
  },
  
  "current_architecture": {
    "main_components": {
      "crypto_signal_bot.py": {
        "purpose": "메인 실행 파일",
        "recent_updates": [
          "프록시 관련 코드 모두 제거",
          "Google Cloud Run 배포 최적화"
        },
        "classes": {
          "CryptoSignalBot": {
            "methods": [
              "get_filtered_symbols() - 실시간 시가총액 필터링",
              "check_single_symbol() - 개별 심볼 시그널 체크",
              "scan_all_symbols() - 전체 심볼 스캔",
              "send_telegram_message() - 텔레그램 알림",
              "handle_api_error() - API 에러 처리",
              "wait_if_banned() - API ban 대기"
            ]
          }
        },
        "features": [
          "매시간 자동 스캔",
          "일일 상태 업데이트",
          "API 제한 자동 처리"
        ]
      },
      
      "config.py": {
        "purpose": "설정 관리",
        "contents": [
          "API 엔드포인트 설정",
          "환경 변수 로드",
          "기본 심볼 목록 관리"
        ]
      },
      
      "symbols.py": {
        "purpose": "심볼 및 API 통신 관리",
        "recent_updates": [
          "프록시 관련 코드 완전 제거",
          "순수 HTTP 요청으로 단순화"
        },
        "functions": [
          "fetch_coinmarketcap_coins_multi_pages() - CMC 데이터 가져오기",
          "get_valid_binance_symbols() - Binance 유효 심볼 확인",
          "fetch_candles() - 캔들 데이터 가져오기",
          "retry_request() - 재시도 로직이 포함된 HTTP 요청",
          "get_proxy_config() - 프록시 설정 가져오기"
        ]
      },
      
      "decision.py": {
        "purpose": "트레이딩 전략 구현",
        "strategy": "Kwon Strategy",
        "functions": [
          "check_single_peak() - 단일 최고점 식별",
          "check_bearish_pattern() - 하락 패턴 확인",
          "kwon_strategy_decision() - 최종 매수 시그널 결정"
        ],
        "parameters": {
          "weekly_window": 5,
          "ema_periods": [15, 33],
          "default_tp": "10%",
          "default_sl": "5%"
        }
      },
      
      "indicators.py": {
        "purpose": "기술적 지표 계산",
        "functions": [
          "compute_ema_series() - EMA 계산"
        ]
      }
    },
    
    "data_flow": [
      "1. CoinMarketCap API → 시가총액 필터링",
      "2. Binance API → 유효 거래쌍 확인 (실패해도 진행)",
      "3. 각 심볼별 주봉 데이터 가져오기",
      "4. Kwon Strategy로 시그널 분석",
      "5. 매수 시그널 발견 시 텔레그램 알림"
    ],
    
    "error_handling": {
      "api_errors": {
        "rate_limit": "Exponential backoff (2^n초 대기)",
        "ban_418": "1시간 대기",
        "connection_error": "최대 10회 재시도",
        "proxy_failure": "직접 연결로 자동 전환"
      },
      "fallback_strategy": [
        "1차: CoinMarketCap 데이터만 사용",
        "2차: 하드코딩된 주요 20개 코인 사용"
      ]
    }
  },
  
  "environment_variables": {
    "required": {
      "BINANCE_API_KEY": "Binance API 키 (읽기 전용)",
      "BINANCE_API_SECRET": "Binance API 시크릿",
      "COINMARKETCAP_API_KEY": "CoinMarketCap API 키",
      "TELEGRAM_BOT_TOKEN": "텔레그램 봇 토큰",
      "TELEGRAM_CHAT_ID": "텔레그램 채팅 ID"
    },
    "optional": {
      "TP_RATIO": "목표가 비율 (기본값: 0.1)",
      "SL_RATIO": "손절가 비율 (기본값: 0.05)",
      "MIN_MARKET_CAP": "최소 시가총액 (기본값: 150000000)",
      "MAX_MARKET_CAP": "최대 시가총액 (기본값: 20000000000)",
      "CMC_MAX_PAGES": "CMC 페이지 수 (기본값: 5)",
      "PROXY_URL": "프록시 URL (선택사항)"
    }
  },
  
  "trading_strategy": {
    "name": "Kwon Strategy (주봉 기반)",
    "timeframe": "1W (Weekly)",
    "entry_conditions": [
      "최근 5개 주봉 내 단일 최고점",
      "최고점 이후 하락 패턴",
      "현재 저가가 EMA(15 또는 33) 아래"
    ],
    "exit_parameters": {
      "take_profit": "진입가 + 10%",
      "stop_loss": "진입가 - 5%"
    },
    "signal_expiry": "168시간 (1주일)"
  },
  
  "next_steps": {
    "immediate": [
      "Google Cloud 프로젝트 생성",
      "Docker 이미지 빌드 및 Artifact Registry 푸시",
      "Secret Manager에 API 키 저장",
      "Cloud Run 서비스 배포",
      "헬스체크 및 모니터링 설정"
    ]
  },
  
  "file_structure": {
    "root": {
      "core_files": {
        "crypto_signal_bot.py": "메인 실행 파일",
        "config.py": "설정 파일",
        "symbols.py": "심볼 관리 (프록시 지원 추가됨)",
        "decision.py": "전략 로직",
        "indicators.py": "기술 지표"
      },
      "configuration": {
        "requirements.txt": "의존성 목록 (Flask 추가, 프록시 의존성 제거)",
        ".env.example": "환경 변수 예시 (프록시 설정 제거)",
        ".gitignore": "Git 제외 설정",
        "runtime.txt": "Python 버전"
      },
      "deployment": {
        "render.yaml": "Render 배포 설정",
        "railway.toml": "Railway 배포 설정 (신규)",
        "fly.toml": "Fly.io 배포 설정 (신규)",
        "build.sh": "빌드 스크립트"
      },
      "documentation": {
        "README.md": "사용 가이드",
        "DEPLOYMENT_GUIDE.md": "배포 가이드",
        "GOOGLE_CLOUD_DEPLOYMENT.md": "Google Cloud Run 상세 배포 가이드 (신규)",
        "DEPLOYMENT_OPTIONS.md": "대체 배포 옵션 가이드",
        "project_status.json": "프로젝트 현황 (현재 파일)"
      },
      "utilities": {
        "cloud_run_wrapper.py": "Cloud Run HTTP 서버 래퍼 (신규)",
        "run_local.sh": "로컬 실행 스크립트"
      },
      "docker": {
        "Dockerfile": "Cloud Run용 Docker 설정",
        ".dockerignore": "Docker 빌드 제외 파일"
      }
    },
    "virtual_environment": {
      "venv/": "Python 가상환경 (로컬 실행용)"
    }
  },
  
  "lessons_learned": {
    "deployment": [
      "클라우드 플랫폼의 IP 대역이 거래소에 차단될 수 있음",
      "SOCKS 프록시가 모든 플랫폼에서 지원되지 않음",
      "로컬 테스트 후 배포가 필수적"
    ],
    "api_management": [
      "읽기 전용 API도 IP 제한이 중요함",
      "프록시 사용 시 선택적 적용이 필요함",
      "에러 처리와 재시도 로직이 안정성의 핵심"
    ],
    "development": [
      "환경별 설정 파일 분리가 중요",
      "상세한 로깅이 디버깅에 필수적",
      "가상환경 사용이 의존성 관리에 도움"
    ]
  }
}